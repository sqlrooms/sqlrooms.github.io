import{_ as t,c as d,o,ag as c}from"./chunks/framework.B-XtCDNB.js";const u=JSON.parse('{"title":"Function: EditableText()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/ui/functions/EditableText.html"}]]},"headers":[],"relativePath":"api/ui/functions/EditableText.md","filePath":"api/ui/functions/EditableText.md"}'),a={name:"api/ui/functions/EditableText.md"};function i(n,e,r,s,l,p){return o(),d("div",null,[...e[0]||(e[0]=[c('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/ui/functions/EditableText.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/ui</a> / EditableText</p><h1 id="function-editabletext" tabindex="-1">Function: EditableText() <a class="header-anchor" href="#function-editabletext" aria-label="Permalink to &quot;Function: EditableText()&quot;">​</a></h1><blockquote><p><strong>EditableText</strong>(<code>props</code>): <code>ReactNode</code> | <code>Promise</code>&lt;<code>ReactNode</code>&gt;</p></blockquote><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>props</code></td><td>{ <code>className</code>: <code>string</code>; <code>isReadOnly</code>: <code>boolean</code>; <code>value</code>: <code>string</code>; <code>minWidth</code>: <code>number</code>; <code>maxWidth</code>: <code>number</code>; <code>placeholder</code>: <code>string</code>; <code>onChange</code>: (<code>text</code>) =&gt; <code>void</code>; <code>defaultEditing</code>: <code>boolean</code>; <code>isEditing</code>: <code>boolean</code>; <code>onEditingChange</code>: (<code>isEditing</code>) =&gt; <code>void</code>; }</td><td>-</td></tr><tr><td><code>props.className</code>?</td><td><code>string</code></td><td>-</td></tr><tr><td><code>props.isReadOnly</code>?</td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>props.value</code></td><td><code>string</code></td><td>-</td></tr><tr><td><code>props.minWidth</code>?</td><td><code>number</code></td><td>-</td></tr><tr><td><code>props.maxWidth</code>?</td><td><code>number</code></td><td>-</td></tr><tr><td><code>props.placeholder</code>?</td><td><code>string</code></td><td>-</td></tr><tr><td><code>props.onChange</code></td><td>(<code>text</code>) =&gt; <code>void</code></td><td>-</td></tr><tr><td><code>props.defaultEditing</code>?</td><td><code>boolean</code></td><td>The editing state when it is initially rendered. Use when you do not need to control its editing state in the parent component.</td></tr><tr><td><code>props.isEditing</code>?</td><td><code>boolean</code></td><td>The controlled editing state of the component. Must be used in conjunction with onEditingChange.</td></tr><tr><td><code>props.onEditingChange</code>?</td><td>(<code>isEditing</code>) =&gt; <code>void</code></td><td>-</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>ReactNode</code> | <code>Promise</code>&lt;<code>ReactNode</code>&gt;</p>',8)])])}const b=t(a,[["render",i]]);export{u as __pageData,b as default};
