import{_ as o,c as d,o as c,ag as t}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Function: BarChart()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/recharts/functions/BarChart.html"}]]},"headers":[],"relativePath":"api/recharts/functions/BarChart.md","filePath":"api/recharts/functions/BarChart.md"}'),n={name:"api/recharts/functions/BarChart.md"};function a(r,e,l,i,s,m){return c(),d("div",null,[...e[0]||(e[0]=[t('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/recharts/functions/BarChart.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/recharts</a> / BarChart</p><h1 id="function-barchart" tabindex="-1">Function: BarChart() <a class="header-anchor" href="#function-barchart" aria-label="Permalink to &quot;Function: BarChart()&quot;">​</a></h1><blockquote><p><strong>BarChart</strong>(<code>props</code>): <code>ReactNode</code></p></blockquote><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>props</code></td><td><code>CategoricalChartProps</code> &amp; <code>RefAttributes</code>&lt;{ <code>eventEmitterSymbol</code>: <code>Symbol</code>; <code>clipPathId</code>: <code>string</code>; <code>accessibilityManager</code>: <code>AccessibilityManager</code>; <code>throttleTriggeredAfterMouseMove</code>: <code>any</code>; <code>container</code>: <code>HTMLElement</code>; <code>componentDidMount</code>: <code>void</code>; <code>displayDefaultTooltip</code>: <code>void</code>; <code>getSnapshotBeforeUpdate</code>: <code>null</code>; <code>componentDidUpdate</code>: <code>void</code>; <code>componentWillUnmount</code>: <code>void</code>; <code>getTooltipEventType</code>: <code>TooltipEventType</code>; <code>getMouseInfo</code>: { <code>activeTooltipIndex</code>: <code>number</code>; <code>activeLabel</code>: <code>any</code>; <code>activePayload</code>: <code>any</code>[]; <code>activeCoordinate</code>: <code>ChartCoordinate</code>; <code>xValue</code>: <code>any</code>; <code>yValue</code>: <code>any</code>; <code>chartX</code>: <code>number</code>; <code>chartY</code>: <code>number</code>; } | { <code>activeTooltipIndex</code>: <code>number</code>; <code>activeLabel</code>: <code>any</code>; <code>activePayload</code>: <code>any</code>[]; <code>activeCoordinate</code>: <code>ChartCoordinate</code>; <code>chartX</code>: <code>number</code>; <code>chartY</code>: <code>number</code>; }; <code>inRange</code>: <code>any</code>; <code>parseEventsOfWrapper</code>: <code>any</code>; <code>addListener</code>: <code>void</code>; <code>removeListener</code>: <code>void</code>; <code>handleLegendBBoxUpdate</code>: (<code>box</code>) =&gt; <code>void</code>; <code>handleReceiveSyncEvent</code>: (<code>cId</code>, <code>data</code>, <code>emitter</code>) =&gt; <code>void</code>; <code>handleBrushChange</code>: (<code>__namedParameters</code>) =&gt; <code>void</code>; <code>handleMouseEnter</code>: (<code>e</code>) =&gt; <code>void</code>; <code>triggeredAfterMouseMove</code>: (<code>e</code>) =&gt; <code>any</code>; <code>handleItemMouseEnter</code>: (<code>el</code>) =&gt; <code>void</code>; <code>handleItemMouseLeave</code>: () =&gt; <code>void</code>; <code>handleMouseMove</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleMouseLeave</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleOuterEvent</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleClick</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleMouseDown</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleMouseUp</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleTouchMove</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleTouchStart</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleTouchEnd</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleDoubleClick</code>: (<code>e</code>) =&gt; <code>void</code>; <code>handleContextMenu</code>: (<code>e</code>) =&gt; <code>void</code>; <code>triggerSyncEvent</code>: (<code>data</code>) =&gt; <code>void</code>; <code>applySyncEvent</code>: (<code>data</code>) =&gt; <code>void</code>; <code>filterFormatItem</code>: <code>any</code>; <code>renderCursor</code>: (<code>element</code>) =&gt; <code>Element</code>; <code>renderPolarAxis</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>renderPolarGrid</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>renderLegend</code>: () =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>renderTooltip</code>: () =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>renderBrush</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>renderReferenceElement</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>renderActivePoints</code>: (<code>__namedParameters</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;[]; <code>renderGraphicChild</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; <code>renderCustomized</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>renderClipPath</code>: <code>Element</code>; <code>getXScales</code>: {}; <code>getYScales</code>: {}; <code>getXScaleByAxisId</code>: <code>Function</code> | <code>ScaleType</code>; <code>getYScaleByAxisId</code>: <code>Function</code> | <code>ScaleType</code>; <code>getItemByXY</code>: { <code>graphicalItem</code>: <code>any</code>; <code>payload</code>: <code>any</code>; }; <code>renderMap</code>: { <code>CartesianGrid</code>: { <code>handler</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>once</code>: <code>boolean</code>; }; <code>ReferenceArea</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; <code>ReferenceLine</code>: { <code>handler</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; <code>ReferenceDot</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; <code>XAxis</code>: { <code>handler</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; <code>YAxis</code>: { <code>handler</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; <code>Brush</code>: { <code>handler</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>once</code>: <code>boolean</code>; }; <code>Bar</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>Line</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>Area</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>Radar</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>RadialBar</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>Scatter</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>Pie</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>Funnel</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>any</code>[]; }; <code>Tooltip</code>: { <code>handler</code>: (<code>element</code>) =&gt; <code>Element</code>; <code>once</code>: <code>boolean</code>; }; <code>PolarGrid</code>: { <code>handler</code>: (<code>element</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; <code>once</code>: <code>boolean</code>; }; <code>PolarAngleAxis</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; <code>PolarRadiusAxis</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; <code>Customized</code>: { <code>handler</code>: (<code>element</code>, <code>displayName</code>, <code>index</code>) =&gt; <code>ReactElement</code>&lt;<code>any</code>, <code>string</code> | <code>JSXElementConstructor</code>&lt;<code>any</code>&gt;&gt;; }; }; <code>render</code>: <code>Element</code>; <code>context</code>: <code>unknown</code>; <code>setState</code>: <code>void</code>; <code>forceUpdate</code>: <code>void</code>; <code>props</code>: <code>Readonly</code>&lt;<code>CategoricalChartProps</code>&gt;; <code>state</code>: <code>Readonly</code>&lt;<code>CategoricalChartState</code>&gt;; <code>refs</code>: {}; <code>shouldComponentUpdate</code>: <code>boolean</code>; <code>componentDidCatch</code>: <code>void</code>; <code>componentWillMount</code>: <code>void</code>; <code>UNSAFE_componentWillMount</code>: <code>void</code>; <code>componentWillReceiveProps</code>: <code>void</code>; <code>UNSAFE_componentWillReceiveProps</code>: <code>void</code>; <code>componentWillUpdate</code>: <code>void</code>; <code>UNSAFE_componentWillUpdate</code>: <code>void</code>; }&gt;</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>ReactNode</code></p>',8)])])}const y=o(n,[["render",a]]);export{h as __pageData,y as default};
