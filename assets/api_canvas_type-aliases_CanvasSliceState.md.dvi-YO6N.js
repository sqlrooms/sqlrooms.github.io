import{_ as o,c as d,o as a,ag as c}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"Type Alias: CanvasSliceState","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/canvas/type-aliases/CanvasSliceState.html"}]]},"headers":[],"relativePath":"api/canvas/type-aliases/CanvasSliceState.md","filePath":"api/canvas/type-aliases/CanvasSliceState.md"}'),t={name:"api/canvas/type-aliases/CanvasSliceState.md"};function s(i,e,n,l,r,p){return a(),d("div",null,[...e[0]||(e[0]=[c('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/canvas/type-aliases/CanvasSliceState.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/canvas</a> / CanvasSliceState</p><h1 id="type-alias-canvasslicestate" tabindex="-1">Type Alias: CanvasSliceState <a class="header-anchor" href="#type-alias-canvasslicestate" aria-label="Permalink to &quot;Type Alias: CanvasSliceState&quot;">​</a></h1><blockquote><p><strong>CanvasSliceState</strong>: <code>AiSliceState</code> &amp; <code>object</code></p></blockquote><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th></tr></thead><tbody><tr><td><code>canvas</code></td><td>{ <code>config</code>: <a href="./CanvasSliceConfig.html"><code>CanvasSliceConfig</code></a>; <code>isAssistantOpen</code>: <code>boolean</code>; <code>sqlResults</code>: <code>Record</code>&lt;<code>string</code>, <code>SqlNodeQueryResult</code>&gt;; <code>initialize</code>: () =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>setViewport</code>: (<code>viewport</code>) =&gt; <code>void</code>; <code>setAssistantOpen</code>: (<code>isAssistantOpen</code>) =&gt; <code>void</code>; <code>addNode</code>: (<code>params</code>) =&gt; <code>string</code>; <code>executeDownstreamFrom</code>: (<code>nodeId</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>renameNode</code>: (<code>nodeId</code>, <code>newTitle</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>updateNode</code>: (<code>nodeId</code>, <code>updater</code>) =&gt; <code>void</code>; <code>deleteNode</code>: (<code>nodeId</code>) =&gt; <code>void</code>; <code>applyNodeChanges</code>: (<code>changes</code>) =&gt; <code>void</code>; <code>applyEdgeChanges</code>: (<code>changes</code>) =&gt; <code>void</code>; <code>addEdge</code>: (<code>edge</code>) =&gt; <code>void</code>; <code>executeSqlNodeQuery</code>: (<code>nodeId</code>, <code>opts</code>?) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; }</td></tr></tbody></table>',6)])])}const S=o(t,[["render",s]]);export{g as __pageData,S as default};
