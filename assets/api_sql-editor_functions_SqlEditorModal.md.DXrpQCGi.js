import{_ as e,c as i,o as s,ag as t}from"./chunks/framework.B-XtCDNB.js";const k=JSON.parse('{"title":"Function: SqlEditorModal()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/sql-editor/functions/SqlEditorModal.html"}]]},"headers":[],"relativePath":"api/sql-editor/functions/SqlEditorModal.md","filePath":"api/sql-editor/functions/SqlEditorModal.md"}'),o={name:"api/sql-editor/functions/SqlEditorModal.md"};function l(n,a,d,r,h,p){return s(),i("div",null,[...a[0]||(a[0]=[t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/sql-editor/functions/SqlEditorModal.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/sql-editor</a> / SqlEditorModal</p><h1 id="function-sqleditormodal" tabindex="-1">Function: SqlEditorModal() <a class="header-anchor" href="#function-sqleditormodal" aria-label="Permalink to &quot;Function: SqlEditorModal()&quot;">​</a></h1><blockquote><p><strong>SqlEditorModal</strong>(<code>props</code>): <code>ReactNode</code> | <code>Promise</code>&lt;<code>ReactNode</code>&gt;</p></blockquote><p>A modal wrapper for the SQL Editor component that provides a full-screen dialog interface.</p><p>This component wraps the main SqlEditor component in a modal dialog, making it suitable for overlay/popup usage scenarios. It inherits all props from SqlEditorProps and handles the modal-specific behavior.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>props</code></td><td><a href="./../type-aliases/Props.html"><code>Props</code></a></td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>ReactNode</code> | <code>Promise</code>&lt;<code>ReactNode</code>&gt;</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SqlEditorModal</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isOpen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onClose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setIsOpen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sqlEditorConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{config}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{handleConfigChange}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><h2 id="see" tabindex="-1">See <a class="header-anchor" href="#see" aria-label="Permalink to &quot;See&quot;">​</a></h2><ul><li><a href="./SqlEditor.html">SqlEditor</a> for detailed documentation of all available props</li><li><a href="./../type-aliases/Props.html">SqlEditorProps</a> The component accepts all props from SqlEditorProps:</li><li><code>isOpen</code> - Whether the SQL editor modal is currently visible</li><li><code>onClose</code> - Callback fired when the modal should be closed</li><li><code>sqlEditorConfig</code> - Configuration object containing queries and selected query state</li><li><code>onChange</code> - Callback fired when the SQL editor configuration changes</li><li><code>schema</code> - Optional database schema to use for queries (defaults to &#39;main&#39;)</li><li><code>documentationPanel</code> - Optional component to render SQL documentation in the side panel</li><li><code>onAddOrUpdateSqlQuery</code> - Callback fired when a new table should be created from query results</li></ul>`,14)])])}const u=e(o,[["render",l]]);export{k as __pageData,u as default};
