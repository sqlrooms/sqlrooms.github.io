import{_ as o,c as d,o as c,ag as t}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Type Alias: AiSliceState","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/ai-core/type-aliases/AiSliceState.html"}]]},"headers":[],"relativePath":"api/ai-core/type-aliases/AiSliceState.md","filePath":"api/ai-core/type-aliases/AiSliceState.md"}'),a={name:"api/ai-core/type-aliases/AiSliceState.md"};function s(i,e,n,l,r,g){return c(),d("div",null,[...e[0]||(e[0]=[t('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/ai-core/type-aliases/AiSliceState.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/ai-core</a> / AiSliceState</p><h1 id="type-alias-aislicestate" tabindex="-1">Type Alias: AiSliceState <a class="header-anchor" href="#type-alias-aislicestate" aria-label="Permalink to &quot;Type Alias: AiSliceState&quot;">​</a></h1><blockquote><p><strong>AiSliceState</strong>: <code>object</code></p></blockquote><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th></tr></thead><tbody><tr><td><a id="ai"></a> <code>ai</code></td><td>{ <code>config</code>: <a href="./AiSliceConfig.html"><code>AiSliceConfig</code></a>; <code>analysisPrompt</code>: <code>string</code>; <code>isRunningAnalysis</code>: <code>boolean</code>; <code>tools</code>: <code>OpenAssistantToolSet</code>; <code>analysisAbortController</code>: <code>AbortController</code>; <code>setAnalysisPrompt</code>: (<code>prompt</code>) =&gt; <code>void</code>; <code>addAnalysisResult</code>: (<code>message</code>) =&gt; <code>void</code>; <code>startAnalysis</code>: (<code>sendMessage</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>cancelAnalysis</code>: () =&gt; <code>void</code>; <code>setAiModel</code>: (<code>modelProvider</code>, <code>model</code>) =&gt; <code>void</code>; <code>createSession</code>: (<code>name</code>?, <code>modelProvider</code>?, <code>model</code>?) =&gt; <code>void</code>; <code>switchSession</code>: (<code>sessionId</code>) =&gt; <code>void</code>; <code>renameSession</code>: (<code>sessionId</code>, <code>name</code>) =&gt; <code>void</code>; <code>deleteSession</code>: (<code>sessionId</code>) =&gt; <code>void</code>; <code>getCurrentSession</code>: () =&gt; <code>AnalysisSessionSchema</code> | <code>undefined</code>; <code>setSessionUiMessages</code>: (<code>sessionId</code>, <code>uiMessages</code>) =&gt; <code>void</code>; <code>setSessionToolAdditionalData</code>: (<code>sessionId</code>, <code>toolCallId</code>, <code>additionalData</code>) =&gt; <code>void</code>; <code>getAnalysisResults</code>: () =&gt; <code>AnalysisResultSchema</code>[]; <code>deleteAnalysisResult</code>: (<code>sessionId</code>, <code>resultId</code>) =&gt; <code>void</code>; <code>getAssistantMessageParts</code>: (<code>analysisResultId</code>) =&gt; <code>UIMessage</code>[<code>&quot;parts&quot;</code>]; <code>findToolComponent</code>: (<code>toolName</code>) =&gt; <code>React.ComponentType</code> | <code>undefined</code>; <code>getApiKeyFromSettings</code>: () =&gt; <code>string</code>; <code>getBaseUrlFromSettings</code>: () =&gt; <code>string</code> | <code>undefined</code>; <code>getMaxStepsFromSettings</code>: () =&gt; <code>number</code>; <code>getFullInstructions</code>: () =&gt; <code>string</code>; <code>getLocalChatTransport</code>: () =&gt; <code>DefaultChatTransport</code>&lt;<code>UIMessage</code>&gt;; <code>chatEndPoint</code>: <code>string</code>; <code>chatHeaders</code>: <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;; <code>getRemoteChatTransport</code>: (<code>endpoint</code>, <code>headers</code>?) =&gt; <code>DefaultChatTransport</code>&lt;<code>UIMessage</code>&gt;; <code>onChatToolCall</code>: <code>ExtendedChatOnToolCallCallback</code>; <code>onChatData</code>: (<code>dataPart</code>) =&gt; <code>void</code>; <code>onChatFinish</code>: (<code>args</code>) =&gt; <code>void</code>; <code>onChatError</code>: (<code>error</code>) =&gt; <code>void</code>; }</td></tr></tbody></table>',6)])])}const S=o(a,[["render",s]]);export{h as __pageData,S as default};
