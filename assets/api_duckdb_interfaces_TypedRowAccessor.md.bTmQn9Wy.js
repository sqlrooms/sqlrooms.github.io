import{_ as a,c as t,o as r,ag as o}from"./chunks/framework.B-XtCDNB.js";const p=JSON.parse('{"title":"Interface: TypedRowAccessor<T>","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/duckdb/interfaces/TypedRowAccessor.html"}]]},"headers":[],"relativePath":"api/duckdb/interfaces/TypedRowAccessor.md","filePath":"api/duckdb/interfaces/TypedRowAccessor.md"}'),d={name:"api/duckdb/interfaces/TypedRowAccessor.md"};function n(c,e,s,i,l,h){return r(),t("div",null,[...e[0]||(e[0]=[o('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/duckdb/interfaces/TypedRowAccessor.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/duckdb</a> / TypedRowAccessor</p><h1 id="interface-typedrowaccessor-t" tabindex="-1">Interface: TypedRowAccessor&lt;T&gt; <a class="header-anchor" href="#interface-typedrowaccessor-t" aria-label="Permalink to &quot;Interface: TypedRowAccessor\\&lt;T\\&gt;&quot;">​</a></h1><h2 id="extends" tabindex="-1">Extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;Extends&quot;">​</a></h2><ul><li><code>Iterable</code>&lt;<code>T</code>&gt;</li></ul><h2 id="extended-by" tabindex="-1">Extended by <a class="header-anchor" href="#extended-by" aria-label="Permalink to &quot;Extended by&quot;">​</a></h2><ul><li><a href="./UseSqlQueryResult.html"><code>UseSqlQueryResult</code></a></li></ul><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th></tr></thead><tbody><tr><td><code>T</code></td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;length&quot;">​</a></h3><blockquote><p><strong>length</strong>: <code>number</code></p></blockquote><p>Number of rows in the table</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="iterator" tabindex="-1">[iterator]() <a class="header-anchor" href="#iterator" aria-label="Permalink to &quot;\\[iterator\\]()&quot;">​</a></h3><blockquote><p><strong>[iterator]</strong>(): <code>Iterator</code>&lt;<code>T</code>, <code>any</code>, <code>any</code>&gt;</p></blockquote><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Iterator</code>&lt;<code>T</code>, <code>any</code>, <code>any</code>&gt;</p><h4 id="inherited-from" tabindex="-1">Inherited from <a class="header-anchor" href="#inherited-from" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><code>Iterable.[iterator]</code></p><hr><h3 id="getrow" tabindex="-1">getRow() <a class="header-anchor" href="#getrow" aria-label="Permalink to &quot;getRow()&quot;">​</a></h3><blockquote><p><strong>getRow</strong>(<code>index</code>): <code>T</code></p></blockquote><p>Returns a typed row at the specified index by converting on demand</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>index</code></td><td><code>number</code></td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>T</code></p><hr><h3 id="rows" tabindex="-1">rows() <a class="header-anchor" href="#rows" aria-label="Permalink to &quot;rows()&quot;">​</a></h3><blockquote><p><strong>rows</strong>(): <code>IterableIterator</code>&lt;<code>T</code>&gt;</p></blockquote><p>Returns an iterator that yields each row in the table</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>IterableIterator</code>&lt;<code>T</code>&gt;</p><hr><h3 id="toarray" tabindex="-1">toArray() <a class="header-anchor" href="#toarray" aria-label="Permalink to &quot;toArray()&quot;">​</a></h3><blockquote><p><strong>toArray</strong>(): <code>T</code>[]</p></blockquote><p>Returns an array containing all rows in the table. The array is cached and reused.</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>T</code>[]</p>',40)])])}const b=a(d,[["render",n]]);export{p as __pageData,b as default};
