import{_ as e,c as o,o as a,ag as d}from"./chunks/framework.B-XtCDNB.js";const p=JSON.parse('{"title":"Type Alias: RoomStateActions<PC>","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/room-shell/type-aliases/RoomStateActions.html"}]]},"headers":[],"relativePath":"api/room-shell/type-aliases/RoomStateActions.md","filePath":"api/room-shell/type-aliases/RoomStateActions.md"}'),s={name:"api/room-shell/type-aliases/RoomStateActions.md"};function r(i,t,c,n,l,h){return a(),o("div",null,[...t[0]||(t[0]=[d('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/room-shell/type-aliases/RoomStateActions.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/room-shell</a> / RoomStateActions</p><h1 id="type-alias-roomstateactions-pc" tabindex="-1">Type Alias: RoomStateActions&lt;PC&gt; <a class="header-anchor" href="#type-alias-roomstateactions-pc" aria-label="Permalink to &quot;Type Alias: RoomStateActions\\&lt;PC\\&gt;&quot;">​</a></h1><blockquote><p><strong>RoomStateActions</strong>&lt;<code>PC</code>&gt;: <code>object</code></p></blockquote><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th></tr></thead><tbody><tr><td><code>PC</code></td></tr></tbody></table><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a id="initialize"></a> <code>initialize</code></td><td>() =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</td><td>-</td></tr><tr><td><a id="setroomconfig"></a> <code>setRoomConfig</code></td><td>(<code>config</code>) =&gt; <code>void</code></td><td>Set the room config.</td></tr><tr><td><a id="setlastsavedconfig"></a> <code>setLastSavedConfig</code></td><td>(<code>config</code>) =&gt; <code>void</code></td><td>Set the last saved room config. This can be used to check if the room has unsaved changes.</td></tr><tr><td><a id="hasunsavedchanges"></a> <code>hasUnsavedChanges()</code></td><td></td><td>-</td></tr><tr><td><a id="onsaveconfig"></a> <code>onSaveConfig</code>?</td><td>(<code>config</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt; | <code>undefined</code></td><td>Called when the project config gets changed. Can be used for saving. To be overridden by the custom project state.</td></tr><tr><td><a id="settaskprogress"></a> <code>setTaskProgress</code></td><td>(<code>id</code>, <code>taskProgress</code>) =&gt; <code>void</code></td><td>-</td></tr><tr><td><a id="getloadingprogress"></a> <code>getLoadingProgress</code></td><td>() =&gt; <a href="./TaskProgress.html"><code>TaskProgress</code></a> | <code>undefined</code></td><td>-</td></tr></tbody></table>',8)])])}const g=e(s,[["render",r]]);export{p as __pageData,g as default};
