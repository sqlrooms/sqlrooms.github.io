import{_ as o,c as d,o as t,ag as c}from"./chunks/framework.B-XtCDNB.js";const q=JSON.parse('{"title":"Function: isUrlDataSource()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/room-store/functions/isUrlDataSource.html"}]]},"headers":[],"relativePath":"api/room-store/functions/isUrlDataSource.md","filePath":"api/room-store/functions/isUrlDataSource.md"}'),r={name:"api/room-store/functions/isUrlDataSource.md"};function n(a,e,s,i,u,l){return t(),d("div",null,[...e[0]||(e[0]=[c('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/room-store/functions/isUrlDataSource.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/room-store</a> / isUrlDataSource</p><h1 id="function-isurldatasource" tabindex="-1">Function: isUrlDataSource() <a class="header-anchor" href="#function-isurldatasource" aria-label="Permalink to &quot;Function: isUrlDataSource()&quot;">​</a></h1><blockquote><p><strong>isUrlDataSource</strong>(<code>ds</code>): ds is { tableName: string; type: &quot;url&quot;; url: string; loadOptions?: { (key: string): unknown; schema?: string; select?: string[]; where?: string; view?: boolean; temp?: boolean; replace?: boolean; method: &quot;read_json&quot; | &quot;read_ndjson&quot; | &quot;read_parquet&quot; | &quot;read_csv&quot; | &quot;auto&quot; } | { (key: string): unknown; schema?: string; select?: string[]; where?: string; view?: boolean; temp?: boolean; replace?: boolean; options?: string | Record&lt;string, unknown&gt; | string[]; method: &quot;st_read&quot; }; httpMethod?: string; headers?: Record&lt;string, string&gt; }</p></blockquote><p>Type guard to check if a data source is a UrlDataSource</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>ds</code></td><td>{ <code>tableName</code>: <code>string</code>; <code>type</code>: <code>&quot;file&quot;</code>; <code>fileName</code>: <code>string</code>; <code>loadOptions</code>: { <code>[key: string]</code>: <code>unknown</code>; <code>schema</code>: <code>string</code>; <code>select</code>: <code>string</code>[]; <code>where</code>: <code>string</code>; <code>view</code>: <code>boolean</code>; <code>temp</code>: <code>boolean</code>; <code>replace</code>: <code>boolean</code>; <code>method</code>: <code>&quot;read_json&quot;</code> | <code>&quot;read_ndjson&quot;</code> | <code>&quot;read_parquet&quot;</code> | <code>&quot;read_csv&quot;</code> | <code>&quot;auto&quot;</code>; } | { <code>[key: string]</code>: <code>unknown</code>; <code>schema</code>: <code>string</code>; <code>select</code>: <code>string</code>[]; <code>where</code>: <code>string</code>; <code>view</code>: <code>boolean</code>; <code>temp</code>: <code>boolean</code>; <code>replace</code>: <code>boolean</code>; <code>options</code>: <code>string</code> | <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt; | <code>string</code>[]; <code>method</code>: <code>&quot;st_read&quot;</code>; }; } | { <code>tableName</code>: <code>string</code>; <code>type</code>: <code>&quot;url&quot;</code>; <code>url</code>: <code>string</code>; <code>loadOptions</code>: { <code>[key: string]</code>: <code>unknown</code>; <code>schema</code>: <code>string</code>; <code>select</code>: <code>string</code>[]; <code>where</code>: <code>string</code>; <code>view</code>: <code>boolean</code>; <code>temp</code>: <code>boolean</code>; <code>replace</code>: <code>boolean</code>; <code>method</code>: <code>&quot;read_json&quot;</code> | <code>&quot;read_ndjson&quot;</code> | <code>&quot;read_parquet&quot;</code> | <code>&quot;read_csv&quot;</code> | <code>&quot;auto&quot;</code>; } | { <code>[key: string]</code>: <code>unknown</code>; <code>schema</code>: <code>string</code>; <code>select</code>: <code>string</code>[]; <code>where</code>: <code>string</code>; <code>view</code>: <code>boolean</code>; <code>temp</code>: <code>boolean</code>; <code>replace</code>: <code>boolean</code>; <code>options</code>: <code>string</code> | <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt; | <code>string</code>[]; <code>method</code>: <code>&quot;st_read&quot;</code>; }; <code>httpMethod</code>: <code>string</code>; <code>headers</code>: <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;; } | { <code>tableName</code>: <code>string</code>; <code>type</code>: <code>&quot;sql&quot;</code>; <code>sqlQuery</code>: <code>string</code>; }</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p>ds is { tableName: string; type: &quot;url&quot;; url: string; loadOptions?: { (key: string): unknown; schema?: string; select?: string[]; where?: string; view?: boolean; temp?: boolean; replace?: boolean; method: &quot;read_json&quot; | &quot;read_ndjson&quot; | &quot;read_parquet&quot; | &quot;read_csv&quot; | &quot;auto&quot; } | { (key: string): unknown; schema?: string; select?: string[]; where?: string; view?: boolean; temp?: boolean; replace?: boolean; options?: string | Record&lt;string, unknown&gt; | string[]; method: &quot;st_read&quot; }; httpMethod?: string; headers?: Record&lt;string, string&gt; }</p>',9)])])}const p=o(r,[["render",n]]);export{q as __pageData,p as default};
