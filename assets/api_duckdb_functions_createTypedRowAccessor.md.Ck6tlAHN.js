import{_ as t,c as a,o,ag as r}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"Function: createTypedRowAccessor()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/duckdb/functions/createTypedRowAccessor.html"}]]},"headers":[],"relativePath":"api/duckdb/functions/createTypedRowAccessor.md","filePath":"api/duckdb/functions/createTypedRowAccessor.md"}'),d={name:"api/duckdb/functions/createTypedRowAccessor.md"};function c(s,e,n,i,p,l){return o(),a("div",null,[...e[0]||(e[0]=[r('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/duckdb/functions/createTypedRowAccessor.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/duckdb</a> / createTypedRowAccessor</p><h1 id="function-createtypedrowaccessor" tabindex="-1">Function: createTypedRowAccessor() <a class="header-anchor" href="#function-createtypedrowaccessor" aria-label="Permalink to &quot;Function: createTypedRowAccessor()&quot;">​</a></h1><blockquote><p><strong>createTypedRowAccessor</strong>&lt;<code>T</code>&gt;(<code>__namedParameters</code>): <a href="./../interfaces/TypedRowAccessor.html"><code>TypedRowAccessor</code></a>&lt;<code>T</code>&gt;</p></blockquote><p>Creates a row accessor wrapper around an Arrow table that provides typed row access.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th><th>Default type</th></tr></thead><tbody><tr><td><code>T</code> <em>extends</em> <code>TypeMap</code></td><td><code>any</code></td></tr></tbody></table><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>__namedParameters</code></td><td>{ <code>arrowTable</code>: <code>Table</code>&lt;<code>T</code>&gt;; <code>validate</code>: (<code>row</code>) =&gt; <code>T</code>; }</td></tr><tr><td><code>__namedParameters.arrowTable</code></td><td><code>Table</code>&lt;<code>T</code>&gt;</td></tr><tr><td><code>__namedParameters.validate</code>?</td><td>(<code>row</code>) =&gt; <code>T</code></td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../interfaces/TypedRowAccessor.html"><code>TypedRowAccessor</code></a>&lt;<code>T</code>&gt;</p>',11)])])}const u=t(d,[["render",c]]);export{m as __pageData,u as default};
