import{_ as e,c as t,o as a,ag as d}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Function: isSpatialLoadFileOptions()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/room-store/functions/isSpatialLoadFileOptions.html"}]]},"headers":[],"relativePath":"api/room-store/functions/isSpatialLoadFileOptions.md","filePath":"api/room-store/functions/isSpatialLoadFileOptions.md"}'),i={name:"api/room-store/functions/isSpatialLoadFileOptions.md"};function n(c,o,s,r,l,p){return a(),t("div",null,[...o[0]||(o[0]=[d('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/room-store/functions/isSpatialLoadFileOptions.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/room-store</a> / isSpatialLoadFileOptions</p><h1 id="function-isspatialloadfileoptions" tabindex="-1">Function: isSpatialLoadFileOptions() <a class="header-anchor" href="#function-isspatialloadfileoptions" aria-label="Permalink to &quot;Function: isSpatialLoadFileOptions()&quot;">​</a></h1><blockquote><p><strong>isSpatialLoadFileOptions</strong>(<code>options</code>): options is { (key: string): unknown; schema?: string; select?: string[]; where?: string; view?: boolean; temp?: boolean; replace?: boolean; options?: string | Record&lt;string, unknown&gt; | string[]; method: &quot;st_read&quot; }</p></blockquote><p>Type guard to check if options are spatial load file options</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>options</code></td><td>{ <code>[key: string]</code>: <code>unknown</code>; <code>schema</code>: <code>string</code>; <code>select</code>: <code>string</code>[]; <code>where</code>: <code>string</code>; <code>view</code>: <code>boolean</code>; <code>temp</code>: <code>boolean</code>; <code>replace</code>: <code>boolean</code>; <code>method</code>: <code>&quot;read_json&quot;</code> | <code>&quot;read_ndjson&quot;</code> | <code>&quot;read_parquet&quot;</code> | <code>&quot;read_csv&quot;</code> | <code>&quot;auto&quot;</code>; } | { <code>[key: string]</code>: <code>unknown</code>; <code>schema</code>: <code>string</code>; <code>select</code>: <code>string</code>[]; <code>where</code>: <code>string</code>; <code>view</code>: <code>boolean</code>; <code>temp</code>: <code>boolean</code>; <code>replace</code>: <code>boolean</code>; <code>options</code>: <code>string</code> | <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt; | <code>string</code>[]; <code>method</code>: <code>&quot;st_read&quot;</code>; }</td><td>The options to check</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p>options is { (key: string): unknown; schema?: string; select?: string[]; where?: string; view?: boolean; temp?: boolean; replace?: boolean; options?: string | Record&lt;string, unknown&gt; | string[]; method: &quot;st_read&quot; }</p><p>True if options are spatial load file options</p>',10)])])}const m=e(i,[["render",n]]);export{h as __pageData,m as default};
