import{_ as a,c as t,o as r,ag as d}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"Function: makePagedQuery()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/data-table/functions/makePagedQuery.html"}]]},"headers":[],"relativePath":"api/data-table/functions/makePagedQuery.md","filePath":"api/data-table/functions/makePagedQuery.md"}'),o={name:"api/data-table/functions/makePagedQuery.md"};function n(i,e,c,s,u,p){return r(),t("div",null,[...e[0]||(e[0]=[d('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/data-table/functions/makePagedQuery.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/data-table</a> / makePagedQuery</p><h1 id="function-makepagedquery" tabindex="-1">Function: makePagedQuery() <a class="header-anchor" href="#function-makepagedquery" aria-label="Permalink to &quot;Function: makePagedQuery()&quot;">​</a></h1><blockquote><p><strong>makePagedQuery</strong>(<code>query</code>, <code>sorting</code>, <code>pagination</code>): <code>string</code></p></blockquote><p>Make a paged query from a query and pagination/sorting state.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>query</code></td><td><code>string</code></td><td>The query to make paged.</td></tr><tr><td><code>sorting</code></td><td><code>SortingState</code></td><td>The sorting state.</td></tr><tr><td><code>pagination</code></td><td><code>PaginationState</code></td><td>The pagination state.</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>string</code></p><p>The paged query.</p>',10)])])}const h=a(o,[["render",n]]);export{m as __pageData,h as default};
