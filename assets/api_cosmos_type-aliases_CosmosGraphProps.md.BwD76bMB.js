import{_ as t,c as e,o as a,ag as d}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"Type Alias: CosmosGraphProps","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/cosmos/type-aliases/CosmosGraphProps.html"}]]},"headers":[],"relativePath":"api/cosmos/type-aliases/CosmosGraphProps.md","filePath":"api/cosmos/type-aliases/CosmosGraphProps.md"}'),r={name:"api/cosmos/type-aliases/CosmosGraphProps.md"};function i(s,o,n,c,p,l){return a(),e("div",null,[...o[0]||(o[0]=[d('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/cosmos/type-aliases/CosmosGraphProps.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/cosmos</a> / CosmosGraphProps</p><h1 id="type-alias-cosmosgraphprops" tabindex="-1">Type Alias: CosmosGraphProps <a class="header-anchor" href="#type-alias-cosmosgraphprops" aria-label="Permalink to &quot;Type Alias: CosmosGraphProps&quot;">​</a></h1><blockquote><p><strong>CosmosGraphProps</strong>: <code>object</code></p></blockquote><p>Props for the CosmosGraph component.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a id="config"></a> <code>config</code></td><td><code>GraphConfigInterface</code></td><td>Configuration object for the graph&#39;s visual and behavioral properties</td></tr><tr><td><a id="pointpositions"></a> <code>pointPositions</code></td><td><code>Float32Array</code></td><td>Float32Array containing x,y coordinates for each point (2 values per point)</td></tr><tr><td><a id="pointsizes"></a> <code>pointSizes</code></td><td><code>Float32Array</code></td><td>Float32Array containing size values for each point (1 value per point)</td></tr><tr><td><a id="pointcolors"></a> <code>pointColors</code></td><td><code>Float32Array</code></td><td>Float32Array containing RGBA values for each point (4 values per point)</td></tr><tr><td><a id="linkindexes"></a> <code>linkIndexes</code>?</td><td><code>Float32Array</code></td><td>Optional Float32Array containing pairs of point indices defining links</td></tr><tr><td><a id="linkcolors"></a> <code>linkColors</code>?</td><td><code>Float32Array</code></td><td>Optional Float32Array containing RGBA values for each link (4 values per link)</td></tr><tr><td><a id="focusedpointindex"></a> <code>focusedPointIndex</code>?</td><td><code>number</code></td><td>Optional index of the point to focus on</td></tr><tr><td><a id="renderpointtooltip"></a> <code>renderPointTooltip</code>?</td><td>(<code>index</code>) =&gt; <code>React.ReactNode</code></td><td>Optional function to render custom tooltip content for a point</td></tr><tr><td><a id="children"></a> <code>children</code>?</td><td><code>React.ReactNode</code></td><td>Optional child elements to render inside the graph container</td></tr></tbody></table>',7)])])}const f=t(r,[["render",i]]);export{m as __pageData,f as default};
