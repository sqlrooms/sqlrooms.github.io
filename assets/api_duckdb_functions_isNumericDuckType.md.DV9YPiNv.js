import{_ as i,c as t,o as a,ag as s}from"./chunks/framework.B-XtCDNB.js";const l=JSON.parse('{"title":"Function: isNumericDuckType()","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/duckdb/functions/isNumericDuckType.html"}]]},"headers":[],"relativePath":"api/duckdb/functions/isNumericDuckType.md","filePath":"api/duckdb/functions/isNumericDuckType.md"}'),n={name:"api/duckdb/functions/isNumericDuckType.md"};function r(c,e,p,d,o,u){return a(),t("div",null,[...e[0]||(e[0]=[s(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/duckdb/functions/isNumericDuckType.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/duckdb</a> / isNumericDuckType</p><h1 id="function-isnumericducktype" tabindex="-1">Function: isNumericDuckType() <a class="header-anchor" href="#function-isnumericducktype" aria-label="Permalink to &quot;Function: isNumericDuckType()&quot;">​</a></h1><blockquote><p><strong>isNumericDuckType</strong>(<code>type</code>): <code>boolean</code></p></blockquote><p>Checks if a DuckDB type string represents a numeric type. Includes INTEGER, DECIMAL, FLOAT, REAL, and DOUBLE types.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>type</code></td><td><code>string</code></td><td>The DuckDB type string to check</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>boolean</code></p><p>True if the type is numeric, false otherwise</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNumericDuckType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;INTEGER&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNumericDuckType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;VARCHAR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns false</span></span></code></pre></div>`,12)])])}const k=i(n,[["render",r]]);export{l as __pageData,k as default};
