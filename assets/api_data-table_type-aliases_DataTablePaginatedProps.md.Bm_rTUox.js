import{_ as a,c as e,o as d,ag as o}from"./chunks/framework.B-XtCDNB.js";const b=JSON.parse('{"title":"Type Alias: DataTablePaginatedProps<Data>","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/data-table/type-aliases/DataTablePaginatedProps.html"}]]},"headers":[],"relativePath":"api/data-table/type-aliases/DataTablePaginatedProps.md","filePath":"api/data-table/type-aliases/DataTablePaginatedProps.md"}'),r={name:"api/data-table/type-aliases/DataTablePaginatedProps.md"};function c(i,t,n,s,l,p){return d(),e("div",null,[...t[0]||(t[0]=[o('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/data-table/type-aliases/DataTablePaginatedProps.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/data-table</a> / DataTablePaginatedProps</p><h1 id="type-alias-datatablepaginatedprops-data" tabindex="-1">Type Alias: DataTablePaginatedProps&lt;Data&gt; <a class="header-anchor" href="#type-alias-datatablepaginatedprops-data" aria-label="Permalink to &quot;Type Alias: DataTablePaginatedProps\\&lt;Data\\&gt;&quot;">​</a></h1><blockquote><p><strong>DataTablePaginatedProps</strong>&lt;<code>Data</code>&gt;: <code>object</code></p></blockquote><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th></tr></thead><tbody><tr><td><code>Data</code> <em>extends</em> <code>object</code></td></tr></tbody></table><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a id="classname"></a> <code>className</code>?</td><td><code>string</code></td><td>-</td></tr><tr><td><a id="fontsize"></a> <code>fontSize</code>?</td><td><code>string</code></td><td>Custom font size for the table e.g. text-xs, text-sm, text-md, text-lg, text-base</td></tr><tr><td><a id="data"></a> <code>data</code>?</td><td><code>ArrayLike</code>&lt;<code>Data</code>&gt;</td><td>-</td></tr><tr><td><a id="columns"></a> <code>columns</code>?</td><td><code>ColumnDef</code>&lt;<code>Data</code>, <code>any</code>&gt;[]</td><td>-</td></tr><tr><td><a id="pagecount"></a> <code>pageCount</code>?</td><td><code>number</code></td><td>-</td></tr><tr><td><a id="numrows"></a> <code>numRows</code>?</td><td><code>number</code></td><td>-</td></tr><tr><td><a id="isfetching"></a> <code>isFetching</code>?</td><td><code>boolean</code></td><td>-</td></tr><tr><td><a id="pagination"></a> <code>pagination</code>?</td><td><code>PaginationState</code></td><td>-</td></tr><tr><td><a id="sorting"></a> <code>sorting</code>?</td><td><code>SortingState</code></td><td>-</td></tr><tr><td><a id="footeractions"></a> <code>footerActions</code>?</td><td><code>React.ReactNode</code></td><td>-</td></tr><tr><td><a id="onpaginationchange"></a> <code>onPaginationChange</code>?</td><td>(<code>pagination</code>) =&gt; <code>void</code></td><td>-</td></tr><tr><td><a id="onsortingchange"></a> <code>onSortingChange</code>?</td><td>(<code>sorting</code>) =&gt; <code>void</code></td><td>-</td></tr><tr><td><a id="onrowclick"></a> <code>onRowClick</code>?</td><td>(<code>args</code>) =&gt; <code>void</code></td><td>Called when a row is clicked.</td></tr><tr><td><a id="onrowdoubleclick"></a> <code>onRowDoubleClick</code>?</td><td>(<code>args</code>) =&gt; <code>void</code></td><td>Called when a row is double-clicked.</td></tr></tbody></table>',8)])])}const h=a(r,[["render",c]]);export{b as __pageData,h as default};
