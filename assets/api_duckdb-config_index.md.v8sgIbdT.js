import{_ as i,c as s,o as n,ag as e}from"./chunks/framework.B-XtCDNB.js";const k=JSON.parse('{"title":"@sqlrooms/duckdb-config","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/duckdb-config/"}]]},"headers":[],"relativePath":"api/duckdb-config/index.md","filePath":"api/duckdb-config/index.md"}'),t={name:"api/duckdb-config/index.md"};function l(o,a,r,h,c,p){return n(),s("div",null,[...a[0]||(a[0]=[e(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/duckdb-config.md for this page in Markdown format</div><h1 id="sqlrooms-duckdb-config" tabindex="-1">@sqlrooms/duckdb-config <a class="header-anchor" href="#sqlrooms-duckdb-config" aria-label="Permalink to &quot;@sqlrooms/duckdb-config&quot;">‚Äã</a></h1><p>A central configuration and type definitions package that maintains base DuckDB configuration schemas and Zod schema definitions for SQLRooms. It provides TypeScript types and interfaces along with essential constants and utilities used for managing DuckDB state.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">‚Äã</a></h2><ul><li>üìù <strong>DuckDB Configuration</strong>: Define and manage room DuckDB configuration schemas.</li><li>üîç <strong>Type Safety</strong>: Strong TypeScript typing for DuckDB configuration objects.</li><li>‚úÖ <strong>Validation</strong>: Zod schemas for runtime validation of DuckDB configurations.</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">‚Äã</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @sqlrooms/duckdb-config</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @sqlrooms/duckdb-config</span></span></code></pre></div><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">‚Äã</a></h2><h3 id="working-with-duckdb-configuration" tabindex="-1">Working with DuckDB Configuration <a class="header-anchor" href="#working-with-duckdb-configuration" aria-label="Permalink to &quot;Working with DuckDB Configuration&quot;">‚Äã</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DuckDbSliceConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  createDefaultDuckDbConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@sqlrooms/duckdb-config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a new DuckDB configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duckDbConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DuckDbSliceConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDefaultDuckDbConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is then used as part of a bigger room configuration.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The \`RoomConfig\` for a room is typically a composition of slice configurations.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For example:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import {SqlEditorSliceConfig} from &#39;@sqlrooms/sql-editor-config&#39;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// type RoomConfig = DuckDbSliceConfig &amp; SqlEditorSliceConfig;</span></span></code></pre></div><h2 id="advanced-features" tabindex="-1">Advanced Features <a class="header-anchor" href="#advanced-features" aria-label="Permalink to &quot;Advanced Features&quot;">‚Äã</a></h2><ul><li><strong>Schema Extensions</strong>: Extend base schemas for custom room types</li><li><strong>Configuration Validation</strong>: Validate configurations at runtime</li><li><strong>Serialization</strong>: Convert configurations to/from JSON for storage</li></ul><p>For more information, visit the SQLRooms documentation.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">‚Äã</a></h2><ul><li><a href="./type-aliases/DuckDbSliceConfig.html">DuckDbSliceConfig</a></li></ul><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">‚Äã</a></h2><ul><li><a href="./variables/DuckDbSliceConfig.html">DuckDbSliceConfig</a></li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">‚Äã</a></h2><ul><li><a href="./functions/createDefaultDuckDbConfig.html">createDefaultDuckDbConfig</a></li></ul>`,20)])])}const u=i(t,[["render",l]]);export{k as __pageData,u as default};
