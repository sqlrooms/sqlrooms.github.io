import{_ as o,c,o as d,ag as a}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Type Alias: DuckDbSliceState","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://sqlrooms.org/api/duckdb/type-aliases/DuckDbSliceState.html"}]]},"headers":[],"relativePath":"api/duckdb/type-aliases/DuckDbSliceState.md","filePath":"api/duckdb/type-aliases/DuckDbSliceState.md"}'),t={name:"api/duckdb/type-aliases/DuckDbSliceState.md"};function l(r,e,i,s,n,b){return d(),c("div",null,[...e[0]||(e[0]=[a('<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /api/duckdb/type-aliases/DuckDbSliceState.md for this page in Markdown format</div><p><a href="./../">@sqlrooms/duckdb</a> / DuckDbSliceState</p><h1 id="type-alias-duckdbslicestate" tabindex="-1">Type Alias: DuckDbSliceState <a class="header-anchor" href="#type-alias-duckdbslicestate" aria-label="Permalink to &quot;Type Alias: DuckDbSliceState&quot;">​</a></h1><blockquote><p><strong>DuckDbSliceState</strong>: <code>object</code></p></blockquote><p>State and actions for the DuckDB slice</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th></tr></thead><tbody><tr><td><a id="db"></a> <code>db</code></td><td>{ <code>connector</code>: <a href="./../interfaces/DuckDbConnector.html"><code>DuckDbConnector</code></a>; <code>schema</code>: <code>string</code>; <code>currentSchema</code>: <code>string</code> | <code>undefined</code>; <code>currentDatabase</code>: <code>string</code> | <code>undefined</code>; <code>tables</code>: <a href="./DataTable.html"><code>DataTable</code></a>[]; <code>tableRowCounts</code>: {}; <code>schemaTrees</code>: <a href="./DbSchemaNode.html"><code>DbSchemaNode</code></a>[]; <code>queryCache</code>: {}; <code>isRefreshingTableSchemas</code>: <code>boolean</code>; <code>setConnector</code>: (<code>connector</code>) =&gt; <code>void</code>; <code>initialize</code>: () =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>destroy</code>: () =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>addTable</code>: <code>Promise</code>&lt;<a href="./DataTable.html"><code>DataTable</code></a>&gt;; <code>loadTableSchemas</code>: <code>Promise</code>&lt;<a href="./DataTable.html"><code>DataTable</code></a>[]&gt;; <code>getTable</code>: <code>undefined</code> | <a href="./DataTable.html"><code>DataTable</code></a>; <code>setTableRowCount</code>: <code>void</code>; <code>findTableByName</code>: <code>undefined</code> | <a href="./DataTable.html"><code>DataTable</code></a>; <code>refreshTableSchemas</code>: <code>Promise</code>&lt;<a href="./DataTable.html"><code>DataTable</code></a>[]&gt;; <code>getConnector</code>: () =&gt; <code>Promise</code>&lt;<a href="./../interfaces/DuckDbConnector.html"><code>DuckDbConnector</code></a>&gt;; <code>getTableRowCount</code>: (<code>table</code>, <code>schema</code>?) =&gt; <code>Promise</code>&lt;<code>number</code>&gt;; <code>loadTableRowCount</code>: (<code>tableName</code>) =&gt; <code>Promise</code>&lt;<code>number</code>&gt;; <code>executeSql</code>: (<code>query</code>) =&gt; <code>Promise</code>&lt;<a href="./QueryHandle.html"><code>QueryHandle</code></a> | <code>null</code>&gt;; <code>getTables</code>: (<code>schema</code>?) =&gt; <code>Promise</code>&lt;<code>string</code>[]&gt;; <code>getTableSchema</code>: (<code>tableName</code>, <code>schema</code>?) =&gt; <code>Promise</code>&lt;<a href="./DataTable.html"><code>DataTable</code></a> | <code>undefined</code>&gt;; <code>getTableSchemas</code>: (<code>schema</code>?) =&gt; <code>Promise</code>&lt;<a href="./DataTable.html"><code>DataTable</code></a>[]&gt;; <code>checkTableExists</code>: (<code>tableName</code>) =&gt; <code>Promise</code>&lt;<code>boolean</code>&gt;; <code>dropTable</code>: (<code>tableName</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>createTableFromQuery</code>: (<code>tableName</code>, <code>query</code>) =&gt; <code>Promise</code>&lt;{ <code>tableName</code>: <code>string</code> | <a href="./QualifiedTableName.html"><code>QualifiedTableName</code></a>; <code>rowCount</code>: <code>number</code>; }&gt;; <code>sqlSelectToJson</code>: (<code>sql</code>) =&gt; <code>Promise</code>&lt;{ <code>error</code>: <code>true</code>; <code>error_type</code>: <code>string</code>; <code>error_message</code>: <code>string</code>; <code>error_subtype</code>: <code>string</code>; <code>position</code>: <code>string</code>; } | { <code>error</code>: <code>false</code>; <code>statements</code>: <code>object</code>[]; }&gt;; }</td></tr></tbody></table>',7)])])}const u=o(t,[["render",l]]);export{h as __pageData,u as default};
